<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chicken Soup for the Fremen Soul</title>
    <description>Some Nerd's blog/portfolio/soapbox
</description>
    <link>http://gabcoh2.github.io/</link>
    <atom:link href="http://gabcoh2.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 08 Aug 2016 22:49:49 -0500</pubDate>
    <lastBuildDate>Mon, 08 Aug 2016 22:49:49 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>ABCTF 2016: a small broadcast</title>
        <description>&lt;h1 id=&quot;problem&quot;&gt;problem&lt;/h1&gt;
&lt;p&gt;I RSA encrypted the same message 3 different times with the same exponent. Can you decrypt &lt;a href=&quot;http://gabcoh2.github.io/assets/abctf_2016/a_small_broadcast/broadcast.txt&quot;&gt;this&lt;/a&gt;?&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;solution&lt;/h1&gt;
&lt;p&gt;As usual, my first instinct in attempting to solve this problem was to 
just factor the modulus using &lt;a href=&quot;https://github.com/radii/msieve&quot;&gt;msieve&lt;/a&gt;. But, a quick test reveals that 
the moduli are to large for msieve to even attempt to factor &lt;em&gt;(on the order 1024 bits)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A quick google of &lt;em&gt;a small broadcast rsa&lt;/em&gt; reveals the wikipedia page
for &lt;a href=&quot;https://en.wikipedia.org/wiki/Coppersmith%27s_attack&quot;&gt;Coppersmith’s attack&lt;/a&gt;. &lt;strong&gt;Håstad’s broadcast attack&lt;/strong&gt; on this page immediatly jumps
out at me for its simmilarity with the name of this problem. Further reading 
confirms this hunch. &lt;strong&gt;Håstad’s broadcast attack&lt;/strong&gt; is exactly what we need.&lt;/p&gt;

&lt;p&gt;Put simply this attack hinges on the &lt;strong&gt;Chinese Remainders Theorem&lt;/strong&gt;;
a thousand year old identity that proves recreational math has far 
reaching implications unfathomable at the time of it’s discovery.&lt;/p&gt;

&lt;p&gt;To understand the &lt;strong&gt;CRT’s&lt;/strong&gt; relavence to this problem we must first recall both the &lt;strong&gt;Textbook RSA
function&lt;/strong&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p^e\equiv C\pmod N&lt;/script&gt;

&lt;p&gt;and that we are given three of these pairs where $p$ and $e$ 
are held constant.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Chinese Remainder Theorem&lt;/strong&gt; tells us that given&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x\equiv a_1\pmod{N_1}\\
  \vdots\\
  x\equiv a_i\pmod{N_i}&lt;/script&gt;

&lt;p&gt;we can uniquely determine x. This is great news because this is the exact situation we are in.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p^e\equiv C_1\pmod{N_1}\\
  \vdots\\
  p^e\equiv C_3\pmod{N_3}&lt;/script&gt;

&lt;p&gt;With Some more searching I found that one of my favorite &lt;a href=&quot;https://hackage.haskell.org/package/arithmoi-0.4.2.0/docs/Math-NumberTheory-Moduli.html#v:chineseRemainder&quot;&gt;haskell libraries&lt;/a&gt;
already has a function to compute $x$ or $p^e$ from Eq. 2 and 3.&lt;/p&gt;

&lt;p&gt;So, after a bit of proccessing and guessing at the private key (it ends up being 3!!!) 
we end up with the flag (&lt;a href=&quot;http://gabcoh2.github.io/assets/abctf_2016/a_small_broadcast/chinese.hs&quot;&gt;code&lt;/a&gt;):&lt;/p&gt;

&lt;center&gt;&lt;code&gt;abctf{ch!n3s3_rema1nd3r_the0rem_is_to0_op_4_m3}&lt;/code&gt;&lt;/center&gt;

&lt;p&gt;ps.&lt;/p&gt;

&lt;p&gt;      sorry for using haskell. email me for any questions on how the program works!&lt;/p&gt;

</description>
        <pubDate>Mon, 08 Aug 2016 00:00:00 -0500</pubDate>
        <link>http://gabcoh2.github.io/2016/08/08/a_small_broadcast.html</link>
        <guid isPermaLink="true">http://gabcoh2.github.io/2016/08/08/a_small_broadcast.html</guid>
        
        <category>ctf</category>
        
        <category>abctf_2016</category>
        
        <category>writeup</category>
        
        
      </item>
    
  </channel>
</rss>
